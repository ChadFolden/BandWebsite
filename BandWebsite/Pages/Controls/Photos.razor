@using System.Text.Json
@inject HttpClient HttpClient


<section id="photosX" class="section">
    <h2>Photos</h2>
    <div id="carouselPhotos" class="carousel slide carousel-fade" data-bs-ride="carousel" data-bs-interval="5000">
        <div class="carousel-inner">
            @for (int i = 0; i < AllPhotos.Count; i++)
            {
                <div class="carousel-item @(i == 0 ? "active" : "")">
                    <iframe src="@AllPhotos[i].Url" width="500" height="500" style="border:none;overflow:hidden" scrolling="no" frameborder="0" allow="autoplay; clipboard-write; encrypted-media; picture-in-picture; web-share" alt="Father Bacon and the Sizzle Photo"></iframe>
                </div>
            }

            <div class="carousel-item" style="height:500px; width:500px;">
                <p>&nbsp;</p>
                <p>&nbsp;</p>
                <p>&nbsp;</p>
                <p>&nbsp;</p>
                <p>&nbsp;</p>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <a href="https://www.facebook.com/FatherBaconSizzle/photos" style="width:800px; text-align: center;">See more photos on our facebook page</a>
            </div>

        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#carouselPhotos" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#carouselPhotos" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
    </div>
</section>



@code {
    private List<Photo>? AllPhotos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await HttpClient.GetAsync("configs/PhotosConfig.json");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            var config = JsonSerializer.Deserialize<PhotosConfig>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            AllPhotos = config?.Photos;
        }
        else
        {
            AllPhotos = new List<Photo>(); // or set default values
        }
    }

    public class PhotosConfig
    {
        public List<Photo> Photos { get; set; } = new();
    }

    public class Photo
    {
        public string Url { get; set; } = string.Empty;
    }
}

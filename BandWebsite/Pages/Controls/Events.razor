@using System.Text.Json
@using System.Text.Json.Serialization
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

<section id="eventsX" class="section">
    <h2>Events</h2>
    <div class="container">
        <ul class="nav nav-tabs" id="myTab" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="upcoming-tab" data-bs-toggle="tab" data-bs-target="#upcoming" type="button" role="tab" aria-controls="upcoming" aria-selected="true">Upcoming</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="past-tab" data-bs-toggle="tab" data-bs-target="#past" type="button" role="tab" aria-controls="past" aria-selected="false">Past</button>
            </li>
        </ul>
        <div class="tab-content" id="myTabContent">
            <div class="tab-pane fade show active" id="upcoming" role="tabpanel" aria-labelledby="upcoming-tab">
                @if (UpcomingEvents != null && UpcomingEvents.Any())
                {
                    <ul class="list-group mt-3">
                        @foreach (var eventItem in UpcomingEvents.Select((value, index) => new { value, index }))
                        {
                            <li class="list-group-item border border-dark table table-striped @(eventItem.index % 2 == 0 ? "bg-dark text-white": "bg-light")">
                                <h5>@eventItem.value.Description</h5>
                                <p>@eventItem.value.Date.ToShortDateString() @eventItem.value.Time</p>
                                <p>
                                    <div class="d-flex align-items-center">
                                        @eventItem.value.Location -
                                        <a href="@eventItem.value.LocationUrl" target="_blank" style="background: none !important; color: blue;">More info ..</a>
                                        <div class="dropdown" style="background: none !important;">
                                            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" data-toggle-second="tooltip" title="Add To Calendar" aria-expanded="false" style="background-color: transparent !important; border: none; padding: 0;">
                                                <span style="color: black;">📅</span> 
                                            </button>
                                            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                                <li><button class="dropdown-item" @onclick='() => AddToCalendar(eventItem.value, "Apple")'>Apple</button></li>
                                                <li><button class="dropdown-item" @onclick='() => AddToCalendar(eventItem.value, "android")'>Android</button></li>
                                                <li><button class="dropdown-item" @onclick='() => AddToCalendar(eventItem.value, "google")'>Google</button></li>
                                                <li><button class="dropdown-item" @onclick='() => AddToCalendar(eventItem.value, "outlook")'>Outlook</button></li>
                                            </ul>
                                        </div>
                                    </div>
                                </p>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="mt-3">Stay tuned!!</p>
                }
            </div>
            <div class="tab-pane fade" id="past" role="tabpanel" aria-labelledby="past-tab">
                @if (PastEvents != null && PastEvents.Any())
                {
                    <ul class="list-group mt-3">
                        @foreach (var eventItem in PastEvents.Select((value, index) => new { value, index }))
                        {
                            <li class="list-group-item border border-dark table table-striped @(eventItem.index % 2 == 0 ? "bg-dark text-white": "bg-light")">
                                <h5>@eventItem.value.Description</h5>
                                <p>@eventItem.value.Date.ToShortDateString() @eventItem.value.Time</p>
                                <p>
                                    <div class="d-flex align-items-center">
                                        @eventItem.value.Location -
                                        <a href="@eventItem.value.LocationUrl" target="_blank" style="background: none !important; color: blue;">More info ..</a>
                                        <div class="dropdown" style="background: none !important;">
                                            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" data-toggle-second="tooltip" title="Add To Calendar" aria-expanded="false" style="background-color: transparent !important; border: none; padding: 0;">
                                                <span style="color: black;">📅</span>
                                            </button>
                                            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                                <li><button class="dropdown-item" @onclick='() => AddToCalendar(eventItem.value, "Apple")'>Apple</button></li>
                                                <li><button class="dropdown-item" @onclick='() => AddToCalendar(eventItem.value, "android")'>Android</button></li>
                                                <li><button class="dropdown-item" @onclick='() => AddToCalendar(eventItem.value, "google")'>Google</button></li>
                                                <li><button class="dropdown-item" @onclick='() => AddToCalendar(eventItem.value, "outlook")'>Outlook</button></li>
                                            </ul>
                                        </div>
                                    </div>
                                </p>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="mt-3">Previous events archived</p>
                }
            </div>
        </div>
    </div>
</section>

@code {
    private List<Event>? UpcomingEvents { get; set; }
    private List<Event>? PastEvents { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await HttpClient.GetAsync("configs/EventsConfig.json");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            var config = JsonSerializer.Deserialize<EventsConfig>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                    Converters = { new DateTimeConverter() }
                });
            var allEvents = config?.Events ?? new List<Event>();
            var currentDate = DateTime.Now;

            UpcomingEvents = allEvents.Where(e => e.Date >= currentDate).OrderBy(e => e.Date).ToList();
            PastEvents = allEvents.Where(e => e.Date < currentDate).OrderByDescending(e => e.Date).ToList();
        }
        else
        {
            // Handle error
            UpcomingEvents = new List<Event>();
            PastEvents = new List<Event>();
        }
    }

    public class EventsConfig
    {
        public List<Event> Events { get; set; } = new();
    }

    public class Event
    {
        public DateTime Date { get; set; }
        public string Time { get; set; } = string.Empty;
        public string Location { get; set; } = string.Empty;
        public string LocationUrl { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
    }

    public class DateTimeConverter : JsonConverter<DateTime>
    {
        public override DateTime Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            if (DateTime.TryParseExact(reader.GetString(), "M/d/yyyy", null, System.Globalization.DateTimeStyles.None, out var date))
            {
                return date;
            }

            return reader.GetDateTime();
        }

        public override void Write(Utf8JsonWriter writer, DateTime value, JsonSerializerOptions options)
        {
            writer.WriteStringValue(value.ToString("M/d/yyyy"));
        }
    }

    private async Task AddToCalendar(Event eventItem, string calendarType)
    {
        // Invoke JavaScript function based on calendarType
        switch (calendarType.ToLower())
        {
            case "apple":
                await JSRuntime.InvokeVoidAsync("addToAppleCalendar", eventItem.Date.ToString("yyyy-MM-dd"), eventItem.Time, eventItem.Description, eventItem.Location, eventItem.LocationUrl);
                break;
            case "android":
                await JSRuntime.InvokeVoidAsync("addToAndroidCalendar", eventItem.Date.ToString("yyyy-MM-dd"), eventItem.Time, eventItem.Description, eventItem.Location, eventItem.LocationUrl);
                break;
            case "google":
                await JSRuntime.InvokeVoidAsync("addToGoogleCalendar", eventItem.Date.ToString("yyyy-MM-dd"), eventItem.Time, eventItem.Description, eventItem.Location, eventItem.LocationUrl);
                break;
            case "outlook":
                await JSRuntime.InvokeVoidAsync("addToOutlookCalendar", eventItem.Date.ToString("yyyy-MM-dd"), eventItem.Time, eventItem.Description, eventItem.Location, eventItem.LocationUrl);
                break;
            default:
                // Handle invalid input
                break;
        }
    }
}

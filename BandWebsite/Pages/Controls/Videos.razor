@using System.Text.Json
@inject HttpClient HttpClient


<section id="videosX" class="section">
    <h2>Videos</h2>
    <div id="carouselVideos" class="carousel slide carousel-fade" data-bs-ride="carousel">
        <div class="carousel-inner">
            @for (int i = 0; i < AllVideos.Count; i++)
            {
                <div class="carousel-item @(i == 0 ? "active" : "")">
                    <iframe src="@AllVideos[i].Url" width="500" height="500" style="border:none;overflow:hidden" scrolling="no" frameborder="0" allow="autoplay; clipboard-write; encrypted-media; picture-in-picture; web-share" alt="Father Bacon and the Sizzle Video"></iframe>
                </div>
            }

            <div class="carousel-item">
                <a width="500" height="500" href="https://www.facebook.com/FatherBaconSizzle/videos">See more videos on our facebook page</a>
            </div>
        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#carouselVideos" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#carouselVideos" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
    </div>
    <div class="carousel">
    </div>
</section>




@code {
    private List<Video>? AllVideos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await HttpClient.GetAsync("configs/VideosConfig.json");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            var config = JsonSerializer.Deserialize<VideosConfig>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            AllVideos = config?.Videos;
        }
        else
        {
            AllVideos = new List<Video>(); // or set default values
        }
    }

    public class VideosConfig
    {
        public List<Video> Videos { get; set; } = new();
    }

    public class Video
    {
        public string Url { get; set; } = string.Empty;
    }
}
